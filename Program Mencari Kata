/*
Anggota : Rizky Kurnia Antasari 2357051011
          Bungaran Natanael Siahaan 2317051048
          Alia Rahayu 2317051079
*/

#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

const int SIZE = 23;

bool Mencari_Kata(char matriks[SIZE][SIZE], string word) {
transform(word.begin(), word.end(), word.begin(), ::toupper);
    //mencari diagonal kiri atas ke kanan bawah (BISA)
    for (int i=0;i<SIZE;i++){
        for (int j=0;j<SIZE;j++){
            bool found = true;
            for (int k=0;k<word.length();k++){
                if (matriks [i+k][j+k]!=word[k]){
                    found = false;
                    break;
                }
            }
            if (found) return true;
        }
    }

//mencari diagonal kanan bawah ke kiri atas 
    for (int i=SIZE-1;i>=word.length()-1;i--){
        for (int j=SIZE-1;j>=word.length()-1;j--){
            bool found = true;
            for (int k=0;k<word.length();k++){
                if (matriks [i-k][j-k]!=word[k]){
                    found = false;
                    break;
                }
            }
            if (found) return true;
        }
    }

// Mencari diagonal kanan atas ke kiri bawah
    for (int i=0;i<SIZE;i++) {
        for (int j=SIZE-1;j>=word.length()-1;j--) {
        bool found = true;
            for (int k=0;k<word.length();k++) {
                if (matriks[i+k][j-k] != word[k]) {
                found = false;
                break;
                }
            }
            if (found) return true;
        }
    }

// Mencari diagonal kiri bawah ke kanan atas
    for (int i=SIZE-1;i>=word.length()-1;i--) {
        for (int j=0;j<SIZE;j++) {
        bool found = true;
            for (int k=0;k<word.length();k++) {
                if (matriks[i-k][j+k] != word[k]) {
                found = false;
                break;
                }
            }
            if (found) return true;
        }
    }
        
// V E R T I K A L (atas - bawah)
for (int i = 0; i < SIZE; ++i) {
    for (int j = 0; j < SIZE; ++j) {
        bool found = true;
        for (int k = 0; k < word.length(); ++k) {
            if (matriks[j + k][i] != word[k]) {
                found = false;
                break;
            }
        }
        if (found) return true;
    }
}

// V E R T I K A L (bawah - atas)
for (int i = SIZE - 1; i >= 0; --i) {
    for (int j = 0; j < SIZE; ++j) {
        bool found = true;
        for (int k = 0; k < word.length(); ++k) {
            if (matriks[i - k][j] != word[k]) { // Mengubah indeks baris menjadi i - k
                found = false;
                break;
            }
        }
        if (found) return true;
    }
}

//horizontal (kanan-kiri)
for(int i = 0; i < SIZE-1; i++){
    for (int j = SIZE-1; j++){
         bool found = true;
         for(int k = 0; k < word.length(); ++k){
             if (matriks[i][j-k] != word[k]){
                 found = false;
                 break;
             }
          }
          if (found) return true;
     }
}

//horizontal(kiri-kanan)
for (int i = 0; i < SIZE; i++){
     for(int j = 0; j < SIZE; j++){
          bool found = true;
          for (int k = 0; k < word.length(); ++k){
               if (matriks[i][j+k] != word[k]){
                   found = false;
                   break;
               }
          }
          if(found) return true;
      }
}
    return false;
}

int main()
{
char matriks[SIZE][SIZE] = {
        {'A','A','F','L','K','H','P','F','S','S','U','F','I','C','I','C','L','E','S','G','N','N','H'},
        {'S','F','V','R','E','O','M','R','W','L','R','T','T','S','X','O','Q','Q','N','A','O','A','O'},
        {'Q','E','I','A','I','F','X','A','E','I','R','F','V','F','Y','S','X','I','M','I','N','J','I'},
        {'W','S','T','R','L','G','O','C','A','P','B','I','A','F','I','W','I','W','T','U','A','C','M'},
        {'F','E','Y','A','E','A','I','S','T','P','C','R','L','U','J','K','O','A','K','C','E','R','S'},
        {'R','V','D','A','K','P','N','D','E','E','H','D','E','M','S','N','C','K','K','F','O','A','H'},
        {'M','R','N','E','D','S','L','C','R','R','I','W','N','R','S','A','A','F','I','T','M','M','I'},
        {'Y','A','A','E','C','I','E','A','H','Y','M','O','T','A','V','H','R','S','S','T','I','S','B'},
        {'R','J','S','E','W','E','L','C','C','E','N','N','I','E','T','O','H','W','S','G','L','S','E'},
        {'A','T','A','N','Y','Y','M','O','I','E','E','S','N','E','S','I','O','I','R','E','L','T','R'},
        {'U','T','E','N','E','W','E','B','H','M','Y','B','E','T','N','N','R','A','I','E','B','E','N'},
        {'R','C','L','K','U','T','E','A','E','Q','J','L','S','G','S','H','T','G','D','S','K','O','A'},
        {'B','H','O','I','C','A','T','N','R','R','S','D','D','E','C','E','H','O','O','L','G','I','T'},
        {'E','N','S','L','U','A','R','I','R','S','E','T','A','L','O','C','O','H','C','T','O','H','E'},
        {'F','Z','F','U','D','Q','J','Y','M','A','D','O','Y','I','W','Y','G','L','O','V','E','S','U'},
        {'T','E','K','A','L','F','W','O','N','S','N','A','E','B','M','I','E','J','T','Z','N','T','G'},
        {'E','S','W','P','O','S','J','X','E','U','T','U','Y','O','Z','U','W','A','K','E','Z','H','M'},
        {'K','Z','U','H','B','P','E','Z','E','E','R','F','L','M','S','N','O','W','B','A','L','L','H'},
        {'N','S','N','O','W','B','O','A','R','D','Y','T','V','W','Y','C','L','E','V','O','H','S','A'},
        {'A','C','O','C','R','Q','L','G','Z','I','Y','C','H','O','D','R','A','Z','Z','I','L','B','I'},
        {'L','B','V','K','K','W','A','N','Z','A','A','Q','I','N','W','O','L','P','W','O','N','S','L'},
        {'B','F','R','E','E','Z','I','N','G','R','A','I','N','S','L','I','L','G','T','M','E','L','T'},
        {'H','Q','P','Y','L','W','H','F','M','N','F','F','U','F','P','S','W','X','N','U','M','M','V'}
    };

    int percobaan;
    cin >> percobaan;
    cin.ignore();
    string words[percobaan];

    for (int i = 0; i < percobaan; ++i) {
        cin >> words[i];
    }
    
    for (int i = 0; i < percobaan; ++i) {
        bool found = Mencari_Kata(matriks, words[i]);
        if (found) cout << "Ada "<< endl;
        else cout << "Tidak Ada "<< endl;
    }
    
    return 0;
}
